
#
# This file is part of Eqela Slingbuild
# Copyright (c) 2018 Eqela Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

use eqela:slingc:r349
use eqela:rocks:r10
use eqela:jkop:20190710
use eqela:jsh:r4
set dotnet eqela:dotnet:2.1.301

### Common section

main {
	call $(*)
}

run {
	call runNetCore src=${1}
}

### .NET Core section

runNetCore : src {
	requireValue src
	use ${dotnet}
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=netcore -libdir=${eqela:jkop}/src \
		-builder=${=expandCommand(eqela:rocks/builder)} -BdotnetPath=${eqela:dotnet} \
		-output=build/${id}/netcore -quiet $(*)
	eqela:dotnet build/${id}/netcore/${id}.dll
}

buildNetCore : src {
	requireValue src
	info
	info "Building for .NET Core: ${src} .."
	info
	use ${dotnet}
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=netcore -libdir=${eqela:jkop}/src \
		-builder=${=expandCommand(eqela:rocks/builder)} -BdotnetPath=${eqela:dotnet} \
		-output=build/${id}/netcore $(*)
}

buildNetCoreStatic : src {
	requireValue src
	info
	info "Building for .NET Core (static): ${src} .."
	info
	use ${dotnet}
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=netcore -libdir=${eqela:jkop}/src \
		-builder=${=expandCommand(eqela:rocks/builder)} -BdotnetPath=${eqela:dotnet} \
		-OstaticBuild=true -output=build/${id}/netcore $(*)
}

buildNetCoreRelease : target pkgcmd src {
	requireValue target
	requireValue pkgcmd
	requireValue src
	info
	info "Building .NET Core release for target ${target}
	info
	use ${dotnet}
	set id ${=getIdNameForPath(${src})}
	setDefault version ${=getDateString()}
	set outputdir build/${id}_${version}_${target}
	eqela:slingc ${src} -target=netcore -libdir=${eqela:jkop}/src -builder=${=expandCommand(eqela:rocks/builder)} \
		-BdotnetPath=${eqela:dotnet} -output=${outputdir} \
		-Brelease=true -OstaticBuild=true -Btarget=${target} $(*)
	eqela:jsh delete ${outputdir}/src
	eqela:jsh delete ${outputdir}/sling.module
	eqela:jsh ${pkgcmd} ${outputdir}
}

buildNetCoreReleaseLinux : src {
	call buildNetCoreRelease target=linux-x64 pkgcmd=tardir src=${src} $(*)
}

buildNetCoreReleaseMacos : src {
	call buildNetCoreRelease target=osx-x64 pkgcmd=tardir src=${src} $(*)
}

buildNetCoreReleaseWin64 : src {
	call buildNetCoreRelease target=win-x64 pkgcmd=zipdir src=${src} $(*)
}

buildNetCoreReleaseWin32 : src {
	call buildNetCoreRelease target=win-x86 pkgcmd=zipdir src=${src} $(*)
}

buildNetCoreReleaseAll : src {
	call buildNetCoreReleaseLinux src=${src} $(*)
	call buildNetCoreReleaseMacos src=${src} $(*)
	call buildNetCoreReleaseWin64 src=${src} $(*)
	call buildNetCoreReleaseWin32 src=${src} $(*)
}

### Eqela packages

buildEqelaPackageDll : src output name version {
	requireValue src
	requireValue output
	setDefault name ${=getIdNameForPath(${src})}
	setDefault version ${=getDateString()}
	info
	info "Building Eqela package DLL: ${src} .."
	info
	use ${dotnet}
	eqela:jsh delete ${output}/tmp
	eqela:slingc -target=netcore ${src} \
		-Dsling_project_name=${name} \
		-Dsling_project_version=${version} \
		-libdir=${eqela:jkop}/src \
		-output=${output}/tmp/src \
		-OstaticBuild=true -PprojectType=console $(*)
	eqela:rocks/builder ${output}/tmp/src -output=${output}/tmp/bin -dotnetPath=${eqela:dotnet}
	eqela:jsh cpto ${output} ${output}/tmp/bin/*.dll ${output}/tmp/bin/*.dylib ${output}/tmp/bin/*.so ${output}/tmp/bin/*/*.dll ${output}/tmp/bin/runtimes ${output}/tmp/bin/apidoc*
	eqela:jsh delete ${output}/tmp
}

buildEqelaPackageDllIncremental : src output name version {
	requireValue src
	requireValue output
	setDefault name ${=getIdNameForPath(${src})}
	setDefault version ${=getDateString()}
	info
	info "Building Eqela package DLL / incremental: ${src} .."
	info
	use ${dotnet}
	eqela:slingc -target=netcore ${src} \
		-Dsling_project_name=${name} \
		-Dsling_project_version=${version} \
		-libdir=${eqela:jkop}/src \
		-builder=${=expandCommand(eqela:rocks/builder)} \
		-BdotnetPath=${eqela:dotnet} -PprojectType=console \
		-output=${output} $(*)
}

buildEqelaPackageFile : files name vendor version platform {
	requireValue files
	requireValue name
	requireValue vendor
	setDefault version ${=getDateString()}
	setDefault platform netcore21
	info
	info "Building Eqela package file: ${files} .."
	info
	eqela:jsh makepkq ${files} -vendor=${vendor} -name=${name} -version=${version} -platform=${platform}
}

buildEqelaPackageFromSource : src name vendor version {
	requireValue src
	requireValue vendor
	setDefault name ${=getIdNameForPath(${src})}
	setDefault version ${=getDateString()}
	eqela:jsh delete build/packagetmp
	call buildEqelaPackageDll src=${src} output=build/packagetmp name=${name} version=${version} $(*)
	call buildEqelaPackageFile name=${name} vendor=${vendor} version=${version} files=build/packagetmp
}

### Web section

buildWeb : src {
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=html5 -libdir=${eqela:jkop}/src -output=build/${id}/web $(*)
}

websiteRun {
	call buildEqelaPackageDllIncremental src=server output=build/server $(*)
	exec build/server/server.dll -Otemplates=templates -Oresources=resources
}

websiteRelease : vendor name version {
	requireValue vendor
	setDefault name ${=getIdNameForPath(".")}
	setDefault version ${=getDateString()}
	set id ${name}_${version}
	eqela:jsh delete build
	call buildEqelaPackageDll src=server output=build/${id} $(*)
	eqela:jsh cpto build/${id}/resources resources/*
	eqela:jsh cpto build/${id}/templates templates/*
	call buildEqelaPackageFile files=build/${id} name=${name} vendor=${vendor} version=${version}
}

websiteStatic {
	eqela:rocks/tpltool -output=build/static resources templates
}

### Java section

buildJava : src {
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=java7 -libdir=${eqela:jkop}/src -output=build/${id}/java -OstaticBuild=true -rebuild-all $(*)
}

### Android section

buildAndroid : src {
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=android -libdir=${eqela:jkop}/src -output=build/${id}/android -OstaticBuild=true -rebuild-all $(*)
}

### iOS section

buildIos : src {
	set id ${=getIdNameForPath(${src})}
	eqela:slingc ${src} -target=iosoc -libdir=${eqela:jkop}/src -output=build/${id}/ios -OstaticBuild=true -rebuild-all $(*)
}
